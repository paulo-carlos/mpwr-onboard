import * as React from "react"
import {
    Frame,
    addPropertyControls,
    ControlType,
    //@ts-ignore - you need this, so Framer doesn't complain about using an undocumented API
    useNavigation,
    RenderTarget,
} from "framer"

export function Longpress(props) {
    var buttonPressTimer, tapTargetComponent

    const handleButtonPress = () => {
        buttonPressTimer = setTimeout(() => {
            goToItem()
        }, 1000)
    }

    const handleButtonRelease = () => {
        clearTimeout(buttonPressTimer)
    }

    // Returns the navigation object
    const navigation = useNavigation()

    const goToItem = () => {
        if (props.target === "previous") {
            navigation.goBack()
        } else if (props.transition === "modal") {
            navigation.modal(props.childern, {
                backdropColor: props.backdropColor,
            })
        } else if (props.transition === "fade") {
            navigation.fade(props.childern)
        } else if (props.transition === "push") {
            navigation.push(props.childern, { appearsFrom: props.appearsFrom })
        } else if (props.transition === "instant") {
            navigation.instant(props.childern)
        } else if (props.transition === "overlay") {
            navigation.overlay(props.childern, {
                appearsFrom: props.appearsFrom,
                backdropColor: props.backdropColor,
            })
        } else if (props.transition === "flip") {
            navigation.flip(props.childern, { appearsFrom: props.appearsFrom })
        }
    }

    if (RenderTarget.current() === RenderTarget.canvas) {
        return (
            <div
                onTouchStart={handleButtonPress}
                onTouchEnd={handleButtonRelease}
                onMouseDown={handleButtonPress}
                onMouseUp={handleButtonRelease}
                style={{
                    background: "rgba(187, 102, 204, 0.2)",
                    border: "dotted 2px #BB66CC",
                    borderRadius: 4,
                    width: props.width,
                    height: props.height,
                }}
            ></div>
        )
    } else {
        return (
            <div
                onTouchStart={handleButtonPress}
                onTouchEnd={handleButtonRelease}
                onMouseDown={handleButtonPress}
                onMouseUp={handleButtonRelease}
                style={{
                    width: props.width,
                    height: props.height,
                }}
            ></div>
        )
    }
}

Longpress.defaultProps = {
    height: 50,
    width: 180,
}

addPropertyControls(Longpress, {
    target: {
        type: ControlType.SegmentedEnum,
        title: "Target",
        defaultValue: "next",
        options: ["previous", "next"],
        optionTitles: ["Previous", "Next"],
    },
    childern: {
        type: ControlType.ComponentInstance,
        title: " ",
        hidden(props) {
            return props.target === "previous"
        },
    },
    transition: {
        type: ControlType.Enum,
        defaultValue: "modal",
        options: ["push", "instant", "fade", "modal", "overlay", "flip"],
        optionTitles: ["Push", "Instant", "Fade", "Modal", "Overlay", "Flip"],
    },
    backdropColor: {
        type: ControlType.Color,
        title: "Backdrop",
        defaultValue: "rgba(0, 0, 0, 0.5)",
        hidden(props) {
            return (
                props.transition === "fade" ||
                props.transition === "push" ||
                props.transition === "instant" ||
                props.transition === "flip"
            )
        },
    },
    appearsFrom: {
        type: ControlType.Enum,
        title: "Direction",
        defaultValue: "modal",
        options: ["left", "right", "top", "bottom"],
        optionTitles: ["Left", "Right", "Top", "Bottom"],
        hidden(props) {
            return (
                props.transition === "modal" ||
                props.transition === "fade" ||
                props.transition === "instant"
            )
        },
    },
})
