import * as React from "react"
import { Frame, useCycle, ControlType, PropertyControls } from "framer"

// Open Preview (CMD + P)
// API Reference: https://www.framer.com/api

interface Props {
    link: string
    linkLabel: string
    underline: boolean
    linkColor: string
    fontsize: number
    onHover: string
}

export class HyperLinks extends React.Component<Props, any> {
    constructor(props) {
        super(props)
    }
    static defaultProps = {
        link: "",
        linkLabel: "",
        underline: false,
        color: "",
        fontsize: 20,
        onHover: true,
    }
    static propertyControls: PropertyControls<Props> = {
        link: {
            type: ControlType.String,
            title: "URL",
            defaultValue: "www.google.com",
        },
        linkColor: {
            type: ControlType.Color,
            title: "Link Color",
            defaultValue: "#000000",
        },
        underline: { type: ControlType.Boolean, title: "Underline" },
        fontsize: { type: ControlType.Number, title: "Text Size" },
        linkLabel: {
            type: ControlType.String,
            title: "Link Label",
            defaultValue: "Google",
        },
        onHover: {
            type: ControlType.Boolean,
            title: "On hover",
            defaultValue: true,
        },
    }

    render() {
        let {
            link,
            linkColor,
            underline,
            fontsize,
            linkLabel,
            onHover,
        } = this.props
        let isUnderline = underline ? null : "none"
        let pattern = /^((http|https):\/\/)/
        let url = link

        if (!pattern.test(link)) {
            url = "http://" + link
        }

        let link_style = {
            color: `${this.props.linkColor}`,
            textDecoration: isUnderline,
            fontSize: `${this.props.fontsize}px`,
            fontFamily: "Verdana, Geneva, sans-serif",
        }
        let externStyle

        if (!underline) {
            if (onHover) {
                externStyle = `
                .linkLabel:hover 
                {
                    text-decoration : underline !important;
                }
            `
            } else {
                externStyle = null
            }
        }

        return (
            <div>
                <a
                    className={onHover ? "linkLabel" : null}
                    href={url}
                    style={link_style}
                >
                    {linkLabel}
                </a>
                <style>{onHover ? externStyle : null}</style>
            </div>
        )
    }
}
